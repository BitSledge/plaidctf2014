#include <cstdlib>
#include <cstring>
#include <iostream>
#include <stdexcept>
#include <string>

#include <errno.h>
#include <unistd.h>

#include "aes256.h"
#include "SHA256.h"

#define PASSWORDHASH "\x88\x10\xad\x58\x1e\x59\xf2\xbc\x39\x28\xb2\x61\x70\x7a\x71\x30" \
                     "\x8f\x7e\x13\x9e\xb0\x48\x20\x36\x6d\xc4\xd5\xc1\x8d\x98\x02\x25"

static const unsigned char comic_enc[] = {
  0x74, 0xec, 0x08, 0x32, 0x1f, 0x26, 0x09, 0xcf, 0xbf, 0x08, 0x10, 0x65,
  0x79, 0x86, 0x12, 0x6b, 0xfe, 0xa7, 0x2f, 0x64, 0x93, 0xa9, 0x03, 0xc7,
  0xe6, 0x1d, 0x07, 0x88, 0x52, 0x74, 0xee, 0xf0, 0x0f, 0xec, 0xc7, 0x3f,
  0x56, 0x83, 0x18, 0xda, 0x31, 0x15, 0x82, 0x8e, 0x42, 0x2d, 0xaf, 0x15,
  0x0f, 0xec, 0xc7, 0x3f, 0x56, 0x83, 0x18, 0xda, 0x31, 0x15, 0x82, 0x8e,
  0x42, 0x2d, 0xaf, 0x15, 0xed, 0x2f, 0x56, 0xeb, 0x2f, 0x64, 0x02, 0x1a,
  0x7c, 0x82, 0xde, 0xd5, 0x72, 0x95, 0xf4, 0x29, 0xe4, 0xcd, 0xe5, 0x68,
  0xdd, 0x68, 0x1c, 0x9e, 0x70, 0x67, 0xac, 0x54, 0x59, 0xa9, 0x3d, 0xc1,
  0x29, 0x1a, 0x14, 0xc7, 0x36, 0xec, 0xc9, 0xb6, 0x27, 0x8d, 0x00, 0xf2,
  0xf3, 0xe1, 0xe4, 0x54, 0x09, 0x91, 0x1f, 0x8b, 0xff, 0x7f, 0x87, 0x30,
  0x64, 0x7c, 0xb2, 0x71, 0x3d, 0x7b, 0x13, 0xe8, 0xe3, 0xf2, 0x96, 0xdd,
  0x6e, 0x0c, 0x97, 0xb6, 0x14, 0xa7, 0x39, 0xf2, 0x9b, 0x17, 0x8b, 0xbe,
  0xdb, 0x6c, 0xa1, 0x2f, 0xfd, 0x0e, 0x26, 0x46, 0x86, 0x39, 0x0c, 0x0d,
  0x59, 0x1f, 0x41, 0xa9, 0xdf, 0x94, 0x1f, 0x9f, 0xdb, 0xfb, 0x3a, 0x98,
  0x67, 0xc8, 0xa7, 0x72, 0x8f, 0xb7, 0x2d, 0x1f, 0x22, 0x3b, 0x4f, 0xf0,
  0x4f, 0xd2, 0x1d, 0x0d, 0x96, 0x5e, 0xbf, 0xb9, 0x05, 0x0f, 0x27, 0x17,
  0x11, 0x9f, 0x1a, 0x9d, 0x70, 0x6f, 0xcd, 0xa3, 0x22, 0x45, 0x3f, 0xf3,
  0x67, 0x2f, 0xdb, 0xf3, 0x12, 0xbd, 0x05, 0xf9, 0x0a, 0x20, 0x00, 0x97,
  0xbe, 0x57, 0x66, 0x73, 0xd6, 0xaf, 0xb0, 0xdd, 0xdb, 0x06, 0xeb, 0x2e,
  0x7b, 0x15, 0x42, 0xba, 0xcf, 0x9e, 0x0a, 0x8f, 0x12, 0x8b, 0xf4, 0x8e,
  0x17, 0xee, 0x5e, 0x5b, 0xd1, 0xf7, 0x62, 0xde, 0xb4, 0xe2, 0x84, 0x28,
  0x5a, 0xbd, 0xfa, 0x3f, 0x20, 0x2b, 0xba, 0x1c, 0xb3, 0x1d, 0xdf, 0xe5,
  0x52, 0x87, 0x29, 0x4e, 0x5c, 0xaf, 0x79, 0xf6, 0x9f, 0x02, 0x6d, 0xfc,
  0xe8, 0xe9, 0xd5, 0xb7, 0x25, 0xf1, 0xe1, 0x5f, 0xa2, 0x33, 0x8c, 0x29,
  0x1c, 0x3a, 0x22, 0x72, 0x7b, 0x49, 0xac, 0x50, 0x7f, 0x2c, 0xfb, 0x23,
  0xdf, 0x7e, 0xa7, 0x95, 0x45, 0x75, 0x0e, 0x25, 0x03, 0x0b, 0xb8, 0xda,
  0x56, 0x4e, 0xb9, 0x45, 0x49, 0xe9, 0xba, 0x51, 0xab, 0xa0, 0x88, 0xcc,
  0xd7, 0x63, 0x4d, 0x80, 0x75, 0x0f, 0x0f, 0xee, 0x39, 0x11, 0xb4, 0xda,
  0x21, 0xdb, 0xb3, 0x4b, 0xc9, 0x68, 0xdc, 0x72, 0xb4, 0x70, 0xe9, 0x88,
  0x14, 0x3c, 0x56, 0x5c, 0x59, 0xc6, 0xc4, 0x8d, 0x53, 0x8a, 0x39, 0xb9,
  0x3c, 0xcb, 0x21, 0xa1, 0x47, 0xd7, 0x8a, 0xfa, 0x01, 0xcd, 0x92, 0x4d,
  0x0f, 0xb0, 0x32, 0xc7, 0x10, 0x8c, 0x59, 0xab, 0x2a, 0x67, 0x27, 0x04,
  0x4c, 0xb1, 0x93, 0x6a, 0xb4, 0x9f, 0x78, 0x9f, 0xf8, 0x6f, 0x6a, 0xa3,
  0xdf, 0x40, 0xb6, 0x56, 0xc3, 0xfb, 0x4e, 0xde, 0x0a, 0x7a, 0x0f, 0x7a,
  0x59, 0x30, 0x2a, 0xf0, 0xb7, 0xbc, 0xdf, 0xed, 0x6e, 0x8d, 0x3a, 0xe6,
  0x78, 0x33, 0xde, 0xe1, 0x80, 0x88, 0x37, 0x9d, 0x96, 0x99, 0xfa, 0xfb,
  0xc4, 0x06, 0xaf, 0xbc, 0x7f, 0x66, 0xfc, 0x8b, 0x01, 0xe8, 0xd5, 0xcd,
  0xec, 0x18, 0x89, 0x8c, 0x95, 0xc5, 0xac, 0x62, 0x31, 0xd4, 0x91, 0x5b,
  0xb4, 0x57, 0x5f, 0x75, 0x90, 0xe4, 0x78, 0x4e, 0x14, 0x8e, 0x5f, 0x43,
  0x0c, 0xe4, 0x4f, 0x98, 0xc5, 0x66, 0xa4, 0x43, 0x63, 0x96, 0x6b, 0xae,
  0x74, 0x76, 0x58, 0xc1, 0x90, 0xda, 0x0e, 0x4a, 0x68, 0x16, 0x2e, 0xea,
  0x54, 0xa4, 0x3d, 0x7e, 0xec, 0x01, 0x7c, 0x91, 0xbf, 0xad, 0x5b, 0x3f,
  0x1e, 0x54, 0xfd, 0xa0, 0xb0, 0x04, 0xc0, 0x6a, 0x92, 0xf0, 0x29, 0xd7,
  0xeb, 0x74, 0xf5, 0x3e, 0x5a, 0xfa, 0x9d, 0x6e, 0x76, 0x2e, 0xbe, 0x7a,
  0x9e, 0x1a, 0x2d, 0xe9, 0xcf, 0x49, 0x77, 0xda, 0xda, 0x8c, 0x3a, 0xbe,
  0x41, 0xaf, 0x23, 0x0e
};
static const unsigned int comic_enc_len = 544;

using namespace std;

void readall(int fd, char * buf, int len)
{
    int ret;
    int cnt = len;
    while (cnt > 0)
    {
        ret = read(fd, buf, cnt);
        if (ret > 0)
        {
            buf += ret;
            cnt -= ret;
        }
        else if (errno != EINTR)
        {
            throw runtime_error("Error during read");
        }
    }
}

char * memstr(char * haystack, int length, const char * needle, int nlen)
{
    char * end = haystack + length;
    while (haystack + nlen <= end)
    {
        if (memcmp(haystack, needle, nlen) == 0)
            return haystack;
        haystack++;
    }
    return NULL;
}

int exploitme()
{
    char buf[1024];

    unsigned int length;
    readall(STDIN_FILENO, (char *)&length, sizeof(length));
    readall(STDIN_FILENO, buf, length);
    char * password = memstr(buf, length, "PASSWORD", 8);
    if (password == NULL)
    {
        cerr << "BAD FORMAT" << endl << "EXPECTED: PASSWORD=[PASSWORD]" << endl;
        return 0;
    }
    password += 9;
    int len_password = buf + length - password;

    // allocate memory for copy of string
    char * copy = new char [len_password];
    memcpy(copy, password, len_password);
    string str(copy, len_password);

    uint8_t hash[32];
    computeSHA256(str, hash);
    if (memcmp(hash, PASSWORDHASH, 32) == 0)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

static void give_reward()
{
    aes256_context *ctx = new aes256_context;
    aes256_init(ctx, (uint8_t *)PASSWORDHASH);
    char * comic = new char [comic_enc_len];
    memcpy(comic, comic_enc, comic_enc_len);
    for (int i = 0; i < comic_enc_len; i += 16)
        aes256_decrypt_ecb(ctx, (uint8_t *)comic + i);
    comic[comic_enc_len-1] = 0;
    cerr << comic << endl;
    aes256_done(ctx);
    delete ctx;
    delete[] comic;
}

int main(int argc, char * argv[])
{
    try
    {
        cerr << "If you guess the password, I will give you a reward!" << endl;
        if (exploitme())
            give_reward();
        else
            cerr << "WRONG PASSWORD!" << endl;
    }
    catch (exception& e)
    {
        cerr << "EXCEPTION: " << e.what() << endl;
    }
    return 0;
}
